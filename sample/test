21
ba 0 7
1 4 5
##start
##steps
##ants
##christmas
##links
##ways
2 5 5
🐭 8 5
3 6 5
#coc asf qg weth
5 9 5
6 10 5
###################
7 -11 -5
🐜 -11 5
9 6 7
#COLOR
#coucuspdfjhhfbpFJV
8 321 23
11 4332 432
12 432 432
##Start
##end
🍕 32 432
2-3
#2-2
3-🍕
🍕-2
🍕-2
6-🐭
5-7
🐭-🐜
🐜-2
🐭-9
🐭-🐜
7-🍕
7-🐜
static int first_way(t_room *r, t_ant *s, char *tmp, int i)
{
	// char *tmp2;

	if (i == -1)
		return (1);
	// tmp2 = NULL;
	if (!tmp)
	{
		tmp = ft_strdup(r[s->max].name);
		// tmp2 = tmp;
		tmp = ft_strjoin(tmp, r[s->max].way);
		// free(tmp2);
	}
	if (ft_strstr(tmp, s->start) && ft_strstr(tmp, s->finish))
	{
		s->test = ft_strdup(tmp);
		return (1);
	}
	else
		return (0);
}

static int split_way(t_room *r, int j, char **tmp, int *k)
{
	char	**tmp2;

	if ((tmp2 = ft_strsplit(r[j].way, ' ')))
	{
		while (tmp2[*k])
		{
			if (!ft_strstr(*tmp, tmp2[*k]) && ft_strlen(tmp2[*k]) > 0)
			{
				*tmp = ft_strjoin(*tmp, " ");
				*tmp = ft_strjoin(*tmp, tmp2[*k]);
				*tmp = ft_strjoin(*tmp, " ");
			}
			free(tmp2[*k]);
			++*k;
		}
		free(tmp2);
		return (1);
	}
	return (0);
}